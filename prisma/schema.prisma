generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider              = "prisma-dbml-generator"
  includeRelationFields = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(50)
  create_at DateTime @default(now())
  update_at DateTime @updatedAt

  roles Role[]
}

// "Admin", "Gestor", "Estudiante", "Mentor"
model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(50)
  create_at DateTime @default(now())
  update_at DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model User {
  id            String   @id @default(uuid()) //? UUID generado a nivel prisma ORM
  dni           String   @unique
  email         String   @unique
  first_name    String   @db.VarChar(50)
  last_name     String   @db.VarChar(50)
  password      String
  birth_date    DateTime @db.Date
  phone         String?  @db.VarChar(50)
  linkedIn      String?  @db.VarChar(50)
  roleId        Int
  institutionId Int
  create_at     DateTime @default(now())
  update_at     DateTime @updatedAt

  role        Role               @relation(fields: [roleId], references: [id])
  institution Institution        @relation(fields: [institutionId], references: [id])
  skills      Skill[]
  mentorships UserOnMentorship[]
}

model Mentorship {
  id                Int                @id @default(autoincrement())
  title             String
  description       String
  max_student_spots Int
  max_mentor_spots  Int                @default(1)
  student_spots     Int
  mentor_spots      Int                @default(1)
  status            EstadoMentoria     @default(PENDIENTE)
  tags              Skill[]
  start_date        DateTime
  end_date          DateTime
  create_at         DateTime           @default(now())
  update_at         DateTime           @updatedAt
  users             UserOnMentorship[]
}

model UserOnMentorship {
  id           Int      @id @default(autoincrement())
  userId       String
  mentorshipId Int
  grade        Int?
  assign_at    DateTime @default(now())
  update_at    DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id])
  mentorship Mentorship @relation(fields: [mentorshipId], references: [id])

  @@unique([userId, mentorshipId])
}

model Institution {
  id   Int             @id @default(autoincrement())
  name String
  type TypeInstitution

  User User[]
}

model Skill {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       User[]
  mentorships Mentorship[]
}

enum TypeInstitution {
  POLO_IT
  ONG
  EMPRESA
}

enum EstadoMentoria {
  PENDIENTE
  ACEPTADA
  PROGRAMADA
  EN_PROGRESO
  COMPLETADA
  CANCELADA
  RECHAZADA
  REAGENDADA
}
